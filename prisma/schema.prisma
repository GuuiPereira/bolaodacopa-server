// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Pool {
  id        String   @id @default(cuid()) // valor gerado automaticamente
  title     String
  code      String   @unique
  createdAt DateTime @default(now())
  ownerId   String?

  participants Participant[]
  score        Score[]
  owner        User?         @relation(fields: [ownerId], references: [id])
}

model Participant {
  id     String @id @default(cuid())
  userId String
  poolId String

  guesses Guess[]
  score   Score[]

  user User @relation(fields: [userId], references: [id])
  pool Pool @relation(fields: [poolId], references: [id])

  @@unique([userId, poolId])
}

model User {
  id        String   @id @default(cuid())
  nome      String
  email     String   @unique
  googleId  String?  @unique
  avatarUrl String?
  createdAt DateTime @default(now())

  refresh_token   RefreshToken?
  participatingAt Participant[]
  ownPools        Pool[]
}

model Game {
  id                    String   @id @default(cuid())
  date                  DateTime
  firstTeamCountryCode  String
  secondTeamCountryCode String
  firstTeamResult       Int?
  secondTeamResult      Int?
  guesses               Guess[]
  score                 Score[]
}

model Guess {
  id               String   @id @default(cuid())
  firstTeamPoints  Int
  secondTeamPoints Int
  createdAt        DateTime @default(now())
  gameId           String
  participantId    String

  participant Participant @relation(fields: [participantId], references: [id])
  game        Game        @relation(fields: [gameId], references: [id])

  @@unique([participantId, gameId])
}

model Score {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  gameId        String
  poolId        String
  participantId String
  points        Int
  participant   Participant @relation(fields: [participantId], references: [id])
  game          Game        @relation(fields: [gameId], references: [id])
  pool          Pool        @relation(fields: [poolId], references: [id])

  @@unique([participantId, gameId, poolId])
}

model RefreshToken {
  id        String @id @default(cuid())
  expiresIn Int
  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique

  @@map("refresh_token")
}
